/*
 * -------------------------------------------------
 *  UCT-Tychus Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */


// Global default params for alignment and assembly modules
params { 

	pwd = "$PWD"
	assembly_output = "tychus_assembly_output"
	alignment_output = "tychus_alignment_output"

	help = false
	read_pairs = "$baseDir/tutorial/raw_sequence_data/*_R{1,2}_001.fq.gz"
	assembly_out_dir = "$baseDir/" + params.assembly_output
	alignment_out_dir = "$baseDir/" + params.alignment_output

	threads = 1

	work_dir = "$baseDir/temporary_files"
	genome = "$baseDir/tutorial/reference/EcoliK-12MG1655.fa"

	// Trimmomatic configuration variables
	leading = 3
	trailing = 3
	slidingwindow = "4:15"
	minlen = 36
	adapters = "TruSeq3-PE.fa"

	// Prokka configuration variables
	genus = ""
	species = ""

	// kSNP3 configuration variables
	ML = ""
	NJ = ""
	min_frac = 0.75

	// Figtree configuration variables
	PNG = ""
	JPEG = ""
	PDF = ""
	SVG = ""
}

profiles {

	alignment {
		includeConfig 'conf/uct_hpc_alignment.config'
    		//includeConfig 'conf/base.config'
		//KL: not sure if we need these env settings??
		//env {
		//	TRIMMOMATIC='/opt/Trimmomatic-0.36'
		//	KSNP3='/usr/local/kSNP3'
		//	FIGTREE='/opt/figtree/lib'
		//}
	}

	assembly {
		includeConfig 'conf/uct_hpc_assembly.config'
    		//includeConfig 'conf/base.config'
		//env {
		//	TRIMMOMATIC='/opt/Trimmomatic-0.36'
		//	CISA='/opt/CISA1.2'
		//}
	}
}


manifest {
  homePage = 'https://github.com/kviljoen/Tychus'
  description = 'Tool for the assembly, annotation, and phylogenetic inference of a large number of bacterial genomes'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
