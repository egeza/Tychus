/*
 * -------------------------------------------------
 *  UCT-Tychus Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */




manifest {
	description = 'Tool for the assembly, annotation, and phylogenetic inference of a large number of bacterial genomes'
}

profiles {

	alignment {
		includeConfig 'conf/alignment.config'
	    	includeConfig 'conf/uct_hpc.config'
    		includeConfig 'conf/base.config'
		//KL: not sure if we need these env settings??
		//env {
		//	TRIMMOMATIC='/opt/Trimmomatic-0.36'
		//	KSNP3='/usr/local/kSNP3'
		//	FIGTREE='/opt/figtree/lib'
		//}
	}

	assembly {
		includeConfig 'conf/assembly.config'
		includeConfig 'conf/uct_hpc.config'
    		includeConfig 'conf/base.config'
		//env {
		//	TRIMMOMATIC='/opt/Trimmomatic-0.36'
		//	CISA='/opt/CISA1.2'
		//}
	}
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/dada2_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/dada2_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/dada2_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/dada2_DAG.svg"
}

manifest {
  homePage = 'https://github.com/kviljoen/16S-rDNA-dada2-pipeline'
  description = 'Nextflow dada2 analysis pipeline for UCT CBIO'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
